/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicagrafica;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ark
 */
public class Pantalla extends javax.swing.JFrame  implements Runnable{

    /**
     * Creates new form Pantalla
     */
    int proceso;
    int[] d;
    Proceso procesoHilo;
    UDPServerConHilo udph;
    Thread hilo;
    int contadorMen;
    List<Tuplas> ci;
    List<Mensaje> mensajesCreados;
    List<Mensaje> buffer;
    List<Proceso> procesoEnvios;
    public Pantalla() {
        initComponents();
        d= new int []{0,0,0,0,0,0};
        txtVector.setText(obtenerVector(d));
        contadorMen=0;
        ci=  new ArrayList<>();
        //hm=  new ArrayList<>();
        mensajesCreados= new ArrayList<>();
        buffer= new ArrayList<>();
        procesoEnvios= new ArrayList<>();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        txtVector = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnEnviar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtMensaje = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCI = new javax.swing.JTextField();
        iniciarHilo = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtPuertoSeleccionado = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPuertoEnvio = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMenRec = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        btnContruir = new javax.swing.JButton();
        comboMensajes = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtBuffer = new javax.swing.JTextArea();
        cbxProceso = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        cbxProcesoVecino = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        txtIPVecino = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtPertoVecino = new javax.swing.JTextField();
        btnAgregarProceso = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        cbxProcesoEnvio = new javax.swing.JComboBox<>();

        jLabel8.setText("jLabel8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtVector.setEditable(false);

        jLabel1.setText("Proceso");

        btnEnviar.setText("Mandar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        jLabel2.setText("Mensaje");

        jLabel3.setText("Vector");

        jLabel4.setText("CI");

        txtCI.setEditable(false);

        iniciarHilo.setText("Iniciar");
        iniciarHilo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarHiloActionPerformed(evt);
            }
        });

        jLabel5.setText("Puerto");

        jLabel6.setText("Puerto que se envia:");

        txtMenRec.setColumns(20);
        txtMenRec.setRows(5);
        jScrollPane1.setViewportView(txtMenRec);

        jLabel7.setText("Mensajes recibidos");

        btnContruir.setText("Contruir Mensaje");
        btnContruir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContruirActionPerformed(evt);
            }
        });

        comboMensajes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un mensaje" }));

        txtBuffer.setColumns(20);
        txtBuffer.setRows(5);
        jScrollPane3.setViewportView(txtBuffer);

        cbxProceso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

        jLabel9.setText("Proceso");

        cbxProcesoVecino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

        jLabel10.setText("IP");

        jLabel11.setText("Puerto");

        btnAgregarProceso.setText("Agregar");
        btnAgregarProceso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProcesoActionPerformed(evt);
            }
        });

        jLabel12.setText("Proceso de envio");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtMensaje)
                        .addGap(254, 254, 254))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnEnviar)
                                    .addGap(36, 36, 36)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtPuertoEnvio))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cbxProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtPuertoSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(38, 38, 38)
                                    .addComponent(iniciarHilo)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnContruir)
                                .addComponent(comboMensajes, 0, 349, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtVector, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtCI, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAgregarProceso)
                                    .addComponent(jLabel7))
                                .addGap(209, 209, 209))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtPertoVecino, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cbxProcesoVecino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(32, 32, 32)
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtIPVecino, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbxProcesoEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(41, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(iniciarHilo)
                    .addComponent(jLabel5)
                    .addComponent(txtPuertoSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(cbxProcesoVecino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtIPVecino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtCI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(btnContruir)
                                .addGap(18, 18, 18)
                                .addComponent(comboMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtPertoVecino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregarProceso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(txtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnviar)
                    .addComponent(jLabel6)
                    .addComponent(txtPuertoEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(cbxProcesoEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // TODO add your handling code here:
        //d[proceso]++;
        
        txtVector.setText(obtenerVector(procesoHilo.getVector()));
        enviarMensaje();
        

    }//GEN-LAST:event_btnEnviarActionPerformed

    private void iniciarHiloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarHiloActionPerformed
        // TODO add your handling code here:
        proceso=cbxProceso.getSelectedIndex();
        hilo = new Thread(this);
        hilo.start();
        txtPuertoSeleccionado.setEnabled(false);
        cbxProceso.setEnabled(false);
        procesoHilo= new Proceso(proceso);
        
    }//GEN-LAST:event_iniciarHiloActionPerformed

    private void btnContruirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContruirActionPerformed
        // TODO add your handling code here:
//        for (int i = 0; i < mensajesCreados.size(); i++) {
//            procesoHilo.agregarTupla(new Tuplas(1,1+i));
//        }
        //d[proceso]++;
        procesoHilo.sumarVector(proceso);
        //mensajesCreados.add(contruirMensaje());
        String cadenaTuplas="";
        
        txtVector.setText(obtenerVector(procesoHilo.getVector()));
        Mensaje auxMen =procesoHilo.crearMensaje(cadenaTuplas);
        mensajesCreados.add(auxMen);
        String vecString="";
        comboMensajes.addItem(auxMen.toString());
        this.procesoHilo.limpiar();
        txtCI.setText("");
    }//GEN-LAST:event_btnContruirActionPerformed

    private void btnAgregarProcesoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProcesoActionPerformed
        // TODO add your handling code here:
        int puertoVecino= Integer.parseInt(txtPertoVecino.getText());
        String direccion = txtIPVecino.getText();
        int idProcesoVecino= Integer.parseInt((String) cbxProcesoVecino.getSelectedItem());
        procesoEnvios.add(new Proceso(idProcesoVecino,puertoVecino, direccion));
        txtPertoVecino.setText("");
        txtIPVecino.setText("");
        cbxProcesoEnvio.removeAllItems();
        for (Proceso procesoEnvio : procesoEnvios) {
            cbxProcesoEnvio.addItem(Integer.toString(procesoEnvio.getId()));
        }
        //cbxProcesoEnvio.addItem(direccion);
    }//GEN-LAST:event_btnAgregarProcesoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla().setVisible(true);
            }
        });
    }
    
    public String obtenerVector(int []vec){
        String resul="";
            resul=Integer.toString(vec[0])+","+Integer.toString(vec[1])+","+Integer.toString(vec[2])+","+
                    Integer.toString(vec[3])+","+Integer.toString(vec[4])+","+Integer.toString(vec[5]);
        return resul;
    }
    
    public Mensaje contruirMensaje(){
        //procesoHilo.sumarVector(proceso);
        
        String cad = txtMensaje.getText();
        
        List<Tuplas> hm=procesoHilo.getCiProceso();
        System.out.println("mams"+hm);
        System.out.println(ci);
        Mensaje conMen = new Mensaje(proceso, procesoHilo.getVector()[proceso], cad, hm);
        List<Tuplas>tuplasMensajeCreado = conMen.getVector();
        System.out.println(conMen.toString());
        txtMensaje.setText("");
        comboMensajes.addItem(conMen.toString());
        //System.out.println(mensajesCreados.toString()+","+ci);
        
        return conMen;
        
    }
    
    public void enviarMensaje(){
        try {
            //contadorMen++;
            DatagramSocket aSocket = new DatagramSocket();
            //List<Tuplas> ci = new ArrayList<Tuplas>();
            Mensaje me ; 
            //Mensaje me2=(Mensaje)comboMensajes.getSelectedItem();;
            me= mensajesCreados.get(comboMensajes.getSelectedIndex()-1);
            //Proceso Seleccionado
            System.out.println("Mensaje envia: "+me);
            Proceso seleccionado;
            seleccionado = procesoEnvios.get( cbxProcesoEnvio.getSelectedIndex());
            
            byte[] incoming = new byte[1024];
            // se ocupa los 2 elementos para poder mandar la clase
            ByteArrayOutputStream outputstream = new ByteArrayOutputStream();
            ObjectOutputStream os = new ObjectOutputStream(outputstream);
            os.writeObject(me);
            //se parsea el objeto a bytes para mandarlo
            byte[] data = outputstream.toByteArray();
            //byte [] m = cad.getBytes();
            //InetAddress aHost = InetAddress.getByName("localhost");
            InetAddress aHost = InetAddress.getByName(seleccionado.getDireccion());
            //int serverPort = 6789;
//            int serverPort=Integer.parseInt(txtPuertoEnvio.getText());
            int serverPort=seleccionado.getPuerto();
            //envio del objecto
            DatagramPacket sendPacket = new DatagramPacket(data, data.length, aHost, serverPort);

            //DatagramPacket request = new DatagramPacket(m,cad.length(),
            //        aHost,serverPort);
            aSocket.send(sendPacket);
        } catch (SocketException e) {
            System.out.println("Socket: " + e.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(UDPCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    public void entregar(Mensaje mensaje){
        List<Tuplas> auxPoda=mensaje.getVector();
        int idProc = mensaje.getIdProceso();
        int numeroMen = mensaje.getNumeroMens();
        //paso 3
        procesoHilo.sumarVector(idProc);
        txtVector.setText(obtenerVector(procesoHilo.getVector()));
        //paso 4
        for (int i = 0; i < ci.size(); i++) {
            if(idProc==ci.get(i).getIdProceso()){
                ci.remove(i);
            }
        }
        procesoHilo.agregarTupla(new Tuplas(idProc, numeroMen));
        //List<Tuplas> cadCIText=ci;
        
        //paso 5
        for (int i = 0; i < ci.size(); i++) {
            for (int j = 0; j < auxPoda.size(); j++) {
                if(ci.get(i).getIdProceso()==auxPoda.get(j).getIdProceso()
                        &&ci.get(i).getIdNumeroMensaje()==auxPoda.get(j).getIdNumeroMensaje()){
                    ci.remove(i);
                }
            }
        }
        txtCI.setText(procesoHilo.getCiProceso().toString());

        String cadena = mensaje.getCad();
        List<Tuplas> vector = mensaje.getVector();
        System.out.println("mensaje recibido: " + idProc + ", " + numeroMen + ", " + cadena + ", " + vector);
        System.out.println(mensaje.toString());
        String cad = Integer.toString(idProc) + ", " + Integer.toString(numeroMen) + ", "
                + cadena+", ";
        txtMenRec.append(mensaje.toString()+ "\n");
        if(buffer.size()!=0){
           checar(); 
        }else{
            txtBuffer.setText("");
        }
        
    }
    
    private void esperar(Mensaje mensaje) {
        System.out.println("entra");
        txtBuffer.setText("");
        buffer.add(mensaje);
        for (Mensaje mensaje1 : buffer) {
            List<Tuplas> vector = mensaje.getVector();
            txtBuffer.append(mensaje1.toString() + vector+ "\n");
        }
    }
    
    private void checar(){
        for (Mensaje mensaje : buffer) {
            
            List<Tuplas> checarCI = mensaje.getVector();
            
            if (mensaje.getNumeroMens() == procesoHilo.getVector()[mensaje.getIdProceso()] + 1) {
                            //se obytienen valores del mensaje
                            System.out.println(checarCI);
                            if (checarCI.size()==0) {
                                entregar(mensaje);
                            } else if (checarCI.size() > 0) {
                                int contador = 0;
                                System.out.println("checa tublas");
                                for (Tuplas tuplas : checarCI) {
                                    if (tuplas.getIdNumeroMensaje() <= procesoHilo.getVector()[tuplas.getIdProceso()]) {
                                        contador++;
                                    }
                                }
                                if (contador == 0) {
                                    entregar(mensaje);
                                } else {
                                    //esperar(mensaje);
//                                    buffer.add(mensaje);
//                                    for (Mensaje mensaje1 : buffer) {
//                                        txtBuffer.append(mensaje1.toString() + "\n");
//                                    }
                                }
                            } 
                        }else {
                                //esperar(mensaje);
//                                buffer.add(mensaje);
//                                for (Mensaje mensaje1 : buffer) {
//                                    txtBuffer.append(mensaje1.toString() + "\n");
//                                }

                            }
        }
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarProceso;
    private javax.swing.JButton btnContruir;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JComboBox<String> cbxProceso;
    private javax.swing.JComboBox<String> cbxProcesoEnvio;
    private javax.swing.JComboBox<String> cbxProcesoVecino;
    private javax.swing.JComboBox<String> comboMensajes;
    private javax.swing.JButton iniciarHilo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtBuffer;
    private javax.swing.JTextField txtCI;
    private javax.swing.JTextField txtIPVecino;
    private javax.swing.JTextArea txtMenRec;
    private javax.swing.JTextField txtMensaje;
    private javax.swing.JTextField txtPertoVecino;
    private javax.swing.JTextField txtPuertoEnvio;
    private javax.swing.JTextField txtPuertoSeleccionado;
    private javax.swing.JTextField txtVector;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            try {
                // se crea el datagrama para recibir el mensaje
                int puertoRecepcion = Integer.parseInt(txtPuertoSeleccionado.getText());
                //DatagramSocket aSocket = new DatagramSocket(6789);
                DatagramSocket aSocket = new DatagramSocket(puertoRecepcion);
                //vector del objeto entrante
                byte[] incoming = new byte[1024];
                while (true) {
                    // se recibe el  datagrama del objeto
                    DatagramPacket incomingPackte = new DatagramPacket(incoming, incoming.length);
                    aSocket.receive(incomingPackte);
//                DatagramPacket request = new DatagramPacket(buffer, buffer.length);
//                aSocket.receive(request);
//se combierte el mensaje recibido a bytes
                    byte[] data = incomingPackte.getData();
//objetos para obtener el objeto en el mensaje
                    ByteArrayInputStream in = new ByteArrayInputStream(data);
                    ObjectInputStream is = new ObjectInputStream(in);
                    Mensaje mensaje;
                    try {
                        //se obtiene el objeto del mensaje
                        mensaje = (Mensaje) is.readObject();
                        List<Tuplas> checarCI = mensaje.getVector();
                        System.out.println("Mensaje recibido en buffer"+mensaje.toString());
                        System.out.println("ER: "+ checarCI);
                        
                        if (mensaje.getNumeroMens() == procesoHilo.getVector()[mensaje.getIdProceso()] + 1) {
                            //se obytienen valores del mensaje
                            System.out.println(checarCI);
                            if (checarCI.size()==0) {
                                entregar(mensaje);
                            } else if (checarCI.size() > 0) {
                                int contador = checarCI.size();
                                System.out.println("checa tublas");
                                for (Tuplas tuplas : checarCI) {
                                    if (tuplas.getIdNumeroMensaje() <= procesoHilo.getVector()[tuplas.getIdProceso()]) {
                                        contador--;
                                    }
                                }
                                if (contador == 0) {
                                    entregar(mensaje);
                                } else {
                                    esperar(mensaje);
//                                    buffer.add(mensaje);
//                                    for (Mensaje mensaje1 : buffer) {
//                                        txtBuffer.append(mensaje1.toString() + "\n");
//                                    }
                                }
                            } 
                        }else {
                                esperar(mensaje);
//                                buffer.add(mensaje);
//                                for (Mensaje mensaje1 : buffer) {
//                                    txtBuffer.append(mensaje1.toString() + "\n");
//                                }

                            }
                        
                        
                        
                        //condicion de prueba para mostrar mensaje
//                    if(vector==vectorProceso+1){
//                        System.out.println("mensaje recibido: "+ numero+", "+cadena+", "+vector);
//                        vectorProceso++;
//                    }else{
//                        System.out.println("mensaje almacenado");
//                    }

                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(UDPServer.class.getName()).log(Level.SEVERE, null, ex);
                    }
//envio de la confirmacion de recepcion del mensaje
//                    InetAddress ipAddress = incomingPackte.getAddress();
//                    int port = incomingPackte.getPort();
//                    String reply = "Thank you for the message";
//                    byte[] replyBytea = reply.getBytes();
//                    DatagramPacket replyPacket
//                            = new DatagramPacket(replyBytea, replyBytea.length, ipAddress, port);
//                    aSocket.send(replyPacket);

//                DatagramPacket reply = new DatagramPacket(request.getData(),
//                        request.getLength(),request.getAddress(),request.getPort());
//                aSocket.send(reply);
                }
            } catch (SocketException e) {
                System.out.println("Socekt: " + e.getMessage());
            } catch (IOException e) {
                System.out.println("IO: " + e.getMessage());
            }
            
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(Pantalla.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    
}
