/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicagrafica;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ark
 */
public class Pantalla extends javax.swing.JFrame  implements Runnable{

    /**
     * Creates new form Pantalla
     */
    int proceso;
    int[] d;
    Proceso procesoHilo;
    UDPServerConHilo udph;
    Thread hilo;
    int contadorMen;
    List<Tuplas> ci,hm;
    List<Mensaje> mensajesCreados;
    List<Mensaje> buffer;
    public Pantalla() {
        initComponents();
        d= new int []{0,0,0,0,0,0};
        txtVector.setText(obtenerVector(d));
        contadorMen=0;
        ci=  new ArrayList<>();
        hm=  new ArrayList<>();
        mensajesCreados= new ArrayList<>();
        buffer= new ArrayList<>();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        txtVector = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnEnviar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtProceso = new javax.swing.JTextField();
        txtMensaje = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCI = new javax.swing.JTextField();
        iniciarHilo = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtPuertoSeleccionado = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPuertoEnvio = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMenRec = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        btnContruir = new javax.swing.JButton();
        comboMensajes = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtBuffer = new javax.swing.JTextArea();

        jLabel8.setText("jLabel8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtVector.setEditable(false);

        jLabel1.setText("Proceso");

        btnEnviar.setText("Mandar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        jLabel2.setText("Mensaje");

        jLabel3.setText("Vector");

        jLabel4.setText("CI");

        txtCI.setEditable(false);

        iniciarHilo.setText("Iniciar");
        iniciarHilo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarHiloActionPerformed(evt);
            }
        });

        jLabel5.setText("Puerto");

        jLabel6.setText("Puerto que se envia:");

        txtMenRec.setColumns(20);
        txtMenRec.setRows(5);
        jScrollPane1.setViewportView(txtMenRec);

        jLabel7.setText("Mensajes recibidos");

        btnContruir.setText("Contruir Mensaje");
        btnContruir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContruirActionPerformed(evt);
            }
        });

        comboMensajes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un mensaje" }));

        txtBuffer.setColumns(20);
        txtBuffer.setRows(5);
        jScrollPane3.setViewportView(txtBuffer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(txtMensaje)
                        .addGap(254, 254, 254))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnEnviar)
                                    .addGap(36, 36, 36)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtPuertoEnvio))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtProceso, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtPuertoSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(38, 38, 38)
                                    .addComponent(iniciarHilo)))
                            .addComponent(jLabel2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnContruir)
                            .addComponent(comboMensajes, 0, 349, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtVector, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCI, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(198, 198, 198))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtProceso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iniciarHilo)
                    .addComponent(jLabel5)
                    .addComponent(txtPuertoSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtVector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtCI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(btnContruir)
                                .addGap(18, 18, 18)
                                .addComponent(comboMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel7)
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)))
                .addComponent(txtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnviar)
                    .addComponent(jLabel6)
                    .addComponent(txtPuertoEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // TODO add your handling code here:
        //d[proceso]++;
        
        txtVector.setText(obtenerVector(procesoHilo.getVector()));
        enviarMensaje();
        hm.clear();
        ci.clear();
//        String cadenaTuplas="";
//        for (Mensaje mensajesCreado : mensajesCreados) {
//            //System.out.println(mensajesCreado.toString());
//            List<Tuplas> auxTuplas = mensajesCreado.getVector();
//            
//            for (Tuplas auxTupla : auxTuplas) {
//                //cadenaTuplas+=auxTupla.toString();
//                cadenaTuplas=cadenaTuplas+auxTupla.toString();
//                System.out.println(auxTupla);
//            }
//            System.out.println(mensajesCreado.toString()+cadenaTuplas+"}");
//        }
 
    }//GEN-LAST:event_btnEnviarActionPerformed

    private void iniciarHiloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarHiloActionPerformed
        // TODO add your handling code here:
        proceso=Integer.parseInt(txtProceso.getText());
        hilo = new Thread(this);
        hilo.start();
        txtPuertoSeleccionado.setEnabled(false);
        txtProceso.setEnabled(false);
        procesoHilo= new Proceso(proceso);
        
    }//GEN-LAST:event_iniciarHiloActionPerformed

    private void btnContruirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContruirActionPerformed
        // TODO add your handling code here:
        //Mensaje auxMen=contruirMensaje();
        comboMensajes.removeAllItems();
        comboMensajes.addItem("Seleccione un mensaje");
        d[proceso]++;
        mensajesCreados.add(contruirMensaje());
        String cadenaTuplas="";
        for (Mensaje mensajesCreado : mensajesCreados) {
            
            List<Tuplas> auxTuplas = mensajesCreado.getVector();
            
//            for (Tuplas auxTupla : auxTuplas) {
//                cadenaTuplas = "(" + auxTupla.getIdProceso() + "," + auxTupla.getIdNumeroMensaje() + ")";
//            }
            comboMensajes.addItem(mensajesCreado.toString());
            System.out.println(mensajesCreado.toString()+auxTuplas+"}");
        }
        
        txtVector.setText(obtenerVector(d));
        //auxMen=null;
    }//GEN-LAST:event_btnContruirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla().setVisible(true);
            }
        });
    }
    
    public String obtenerVector(int []vec){
        String resul="";
            resul=Integer.toString(vec[0])+","+Integer.toString(vec[1])+","+Integer.toString(vec[2])+","+
                    Integer.toString(vec[3])+","+Integer.toString(vec[4])+","+Integer.toString(vec[5]);
        return resul;
    }
    
    public Mensaje contruirMensaje(){
        procesoHilo.sumarVector(proceso);
        String cad = txtMensaje.getText();
        
//        ci.add(new Tuplas(proceso,procesoHilo.getVector()[proceso]));
//        ci.add(new Tuplas(proceso,procesoHilo.getVector()[proceso]+1));
        hm=ci;
//        for (Tuplas tuplas : ci) {
//            System.out.println(tuplas);
//        }
        Mensaje conMen = new Mensaje(proceso, procesoHilo.getVector()[proceso], cad, hm);
        txtMensaje.setText("");
        //System.out.println(mensajesCreados.toString()+","+ci);
        return conMen;
    }
    
    public void enviarMensaje(){
        try {
            //contadorMen++;
            DatagramSocket aSocket = new DatagramSocket();
            //List<Tuplas> ci = new ArrayList<Tuplas>();
            Mensaje me ; 
            //Mensaje me2=(Mensaje)comboMensajes.getSelectedItem();;
            me= mensajesCreados.get(comboMensajes.getSelectedIndex()-1);
            
            byte[] incoming = new byte[1024];
            // se ocupa los 2 elementos para poder mandar la clase
            ByteArrayOutputStream outputstream = new ByteArrayOutputStream();
            ObjectOutputStream os = new ObjectOutputStream(outputstream);
            os.writeObject(me);
            //se parsea el objeto a bytes para mandarlo
            byte[] data = outputstream.toByteArray();
            //byte [] m = cad.getBytes();
            InetAddress aHost = InetAddress.getByName("localhost");
            //int serverPort = 6789;
            int serverPort=Integer.parseInt(txtPuertoEnvio.getText());
            //envio del objecto
            DatagramPacket sendPacket = new DatagramPacket(data, data.length, aHost, serverPort);

            //DatagramPacket request = new DatagramPacket(m,cad.length(),
            //        aHost,serverPort);
            aSocket.send(sendPacket);
        } catch (SocketException e) {
            System.out.println("Socket: " + e.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(UDPCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    public void entregar(Mensaje mensaje){
        int idProc = mensaje.getIdProceso();
        int numeroMen = mensaje.getNumeroMens();
        String ciTex = "";
//        ci.add(new Tuplas(idProc, numeroMen));
//        for (Tuplas tuplas : ci) {
//            ciTex = "(" + tuplas.getIdProceso() + "," + tuplas.getIdNumeroMensaje() + ")";
//        }
        String cadena = mensaje.getCad();
        List<Tuplas> vector = mensaje.getVector();
        System.out.println("mensaje recibido: " + idProc + ", " + numeroMen + ", " + cadena + ", " + vector);
        String cad = Integer.toString(idProc) + ", " + Integer.toString(numeroMen) + ", "
                + cadena;
        txtMenRec.append(cad + "\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnContruir;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JComboBox<String> comboMensajes;
    private javax.swing.JButton iniciarHilo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtBuffer;
    private javax.swing.JTextField txtCI;
    private javax.swing.JTextArea txtMenRec;
    private javax.swing.JTextField txtMensaje;
    private javax.swing.JTextField txtProceso;
    private javax.swing.JTextField txtPuertoEnvio;
    private javax.swing.JTextField txtPuertoSeleccionado;
    private javax.swing.JTextField txtVector;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            try {
                // se crea el datagrama para recibir el mensaje
                int puertoRecepcion = Integer.parseInt(txtPuertoSeleccionado.getText());
                //DatagramSocket aSocket = new DatagramSocket(6789);
                DatagramSocket aSocket = new DatagramSocket(puertoRecepcion);
                //vector del objeto entrante
                byte[] incoming = new byte[1024];
                while (true) {
                    // se recibe el  datagrama del objeto
                    DatagramPacket incomingPackte = new DatagramPacket(incoming, incoming.length);
                    aSocket.receive(incomingPackte);
//                DatagramPacket request = new DatagramPacket(buffer, buffer.length);
//                aSocket.receive(request);
//se combierte el mensaje recibido a bytes
                    byte[] data = incomingPackte.getData();
//objetos para obtener el objeto en el mensaje
                    ByteArrayInputStream in = new ByteArrayInputStream(data);
                    ObjectInputStream is = new ObjectInputStream(in);
                    Mensaje mensaje;
                    try {
                        //se obtiene el objeto del mensaje
                        mensaje = (Mensaje) is.readObject();
                        
                        
                        
                        if(mensaje.getNumeroMens()==procesoHilo.getVector()[mensaje.getIdProceso()]+1){
                        //se obytienen valores del mensaje
                        
                            entregar(mensaje);
                        }else{
                            buffer.add(mensaje);
                            for (Mensaje mensaje1 : buffer) {
                                txtBuffer.append(mensaje1.toString()+"\n");
                            }
                            
                        }
                        
                        
                        
                        
                        //condicion de prueba para mostrar mensaje
//                    if(vector==vectorProceso+1){
//                        System.out.println("mensaje recibido: "+ numero+", "+cadena+", "+vector);
//                        vectorProceso++;
//                    }else{
//                        System.out.println("mensaje almacenado");
//                    }

                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(UDPServer.class.getName()).log(Level.SEVERE, null, ex);
                    }
//envio de la confirmacion de recepcion del mensaje
//                    InetAddress ipAddress = incomingPackte.getAddress();
//                    int port = incomingPackte.getPort();
//                    String reply = "Thank you for the message";
//                    byte[] replyBytea = reply.getBytes();
//                    DatagramPacket replyPacket
//                            = new DatagramPacket(replyBytea, replyBytea.length, ipAddress, port);
//                    aSocket.send(replyPacket);

//                DatagramPacket reply = new DatagramPacket(request.getData(),
//                        request.getLength(),request.getAddress(),request.getPort());
//                aSocket.send(reply);
                }
            } catch (SocketException e) {
                System.out.println("Socekt: " + e.getMessage());
            } catch (IOException e) {
                System.out.println("IO: " + e.getMessage());
            }
            
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(Pantalla.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
